
/**
 * 
 * autogenerated by solidity-visual-auditor
 * 
 * execute with: 
 *  #> truffle test <path/to/this/test.js>
 * 
 * */

var Verifier = artifacts.require("../contracts/Verifier.sol");

contract('Verifier', (accounts) => {
    var creatorAddress = accounts[0];
    var firstOwnerAddress = accounts[1];
    var secondOwnerAddress = accounts[2];
    var externalAddress = accounts[3];
    var unprivilegedAddress = accounts[4]
    /* create named accounts for contract roles */

    before(async () => {
        /* before tests */
    })

    beforeEach(async () => {
        /* before each context */
    })

    it('should revert if ...', () => {
        return Verifier.deployed()
            .then(instance => {
                return instance.publicOrExternalContractMethod(argument1, argument2, { from: externalAddress });
            })
            .then(result => {
                assert.fail();
            })
            .catch(error => {
                assert.notEqual(error.message, "assert.fail()", "Reason ...");
            });
    });

    context('testgroup - security tests - description...', () => {

        let instanceVerifier;


        //deploy a new contract
        before(async () => {
            /* before tests */
        })


        beforeEach(async () => {
            /* before each tests */
            instanceVerifier = await Verifier.new({ from: creatorAddress })
        })



        it('fails to initialize a new contract', async () => {
            // No address should be present
            let address_1 = await instanceVerifier.clients(firstOwnerAddress);
            let address_2 = await instanceVerifier.clients(secondOwnerAddress);

            assert.isFalse(address_1);
            assert.isFalse(address_2);
        })

        /**
         * Add an address for a valid client.
         */
        it('fails on setting a new user', async () => {

            clientsToAdd = [firstOwnerAddress];
            clientsToRemove = [];

            // Add the address
            await instanceVerifier.updateClients(clientsToAdd, clientsToRemove, { from: creatorAddress });

            // Verify that the address exists
            let checkValidAccount = await instanceVerifier.clients(firstOwnerAddress);
            let checkNoValidAccount = await instanceVerifier.clients(secondOwnerAddress);

            assert.isTrue(checkValidAccount);
            assert.isFalse(checkNoValidAccount);
        })

        /**
         * Check the deletion of an address.
         */
        it('fails on removing a user', async () => {

            clientsToAdd = [firstOwnerAddress];
            clientsToRemove = [];

            // Add the address
            await instanceVerifier.updateClients(clientsToAdd, clientsToRemove, { from: creatorAddress });

            // Verify that the address exists
            let checkValidAccount = await instanceVerifier.clients(firstOwnerAddress);
            assert.isTrue(checkValidAccount);

            // Delete the address
            clientsToAdd = [];
            clientsToRemove = [firstOwnerAddress];

            await instanceVerifier.updateClients(clientsToAdd, clientsToRemove, { from: creatorAddress });
            let checkDeletedAddress = await instanceVerifier.clients(firstOwnerAddress);
            assert.isFalse(checkDeletedAddress);
        })

        /**
         * Test on adding two addresses
         */
         it('fails on adding two different addresses', async () => {

            clientsToAdd = [firstOwnerAddress, secondOwnerAddress];
            clientsToRemove = [];

            // Add the address
            await instanceVerifier.updateClients(clientsToAdd, clientsToRemove, { from: creatorAddress });

            // Verify that the address exists
            let checkFirstAddress  = await instanceVerifier.clients(firstOwnerAddress);
            let checkSecondAddress = await instanceVerifier.clients(secondOwnerAddress);

            assert.isTrue(checkFirstAddress);
            assert.isTrue(checkSecondAddress);
        })


        /**
         * Test doublon addresses when adding.
         */
        it('fails on keeping only one address when adding', async () => {

            clientsToAdd = [firstOwnerAddress, firstOwnerAddress];
            clientsToRemove = [];

            // Add the address
            await instanceVerifier.updateClients(clientsToAdd, clientsToRemove, { from: creatorAddress });

            // Verify that the address exists
            let checkValidAccount = await instanceVerifier.clients(firstOwnerAddress);
            assert.isTrue(checkValidAccount);
        })


    })
});
